version: 41
jobs:
- name: build-glibc
  jobExecutor: barbatos-docker
  steps:
  - type: SetupCacheStep
    name: cache-apk-edge-x86_64
    key: apk-cache-edge-x86_64
    paths:
    - /etc/apk/cache
    uploadStrategy: UPLOAD_IF_CHANGED
    changeDetectionExcludes: installed
    uploadProjectPath: sev
    uploadAccessTokenSecret: sev-access-token
    condition: SUCCESSFUL
    optional: false
  - type: SetupCacheStep
    name: cache-glibc-bin
    key: glibc-bin
    paths:
    - glibc-bin
    uploadStrategy: UPLOAD_IF_CHANGED
    condition: SUCCESSFUL
    optional: false
  - type: CheckoutStep
    name: checkout
    cloneCredential:
      type: HttpCredential
      accessTokenSecret: sev-access-token
    withLfs: false
    withSubmodules: true
    cloneDepth: 1
    checkoutPath: alpine-pkg-glibc
    condition: SUCCESSFUL
    optional: false
  - type: CommandStep
    name: extract-version
    runInContainer: true
    image: alpine:edge
    interpreter:
      type: DefaultInterpreter
      commands: |
        # source to get $pkgver and $pkgrel
        . alpine-pkg-glibc/APKBUILD
        echo "$pkgver-r$pkgrel" > version
        echo "extracted version from APKBUILD: $(cat version)"
    useTTY: true
    condition: SUCCESSFUL
    optional: false
  - type: SetBuildVersionStep
    name: set-version
    buildVersion: '@file:version@'
    condition: SUCCESSFUL
    optional: false
  - type: CommandStep
    name: build-glibc-bin
    runInContainer: true
    image: alpine:edge
    interpreter:
      type: DefaultInterpreter
      commands: |
        set -e

        # read version
        BUILD_VERSION="$(cat version)"
        # strip revision from version
        set -- $(IFS=-; echo ${$+$BUILD_VERSION})

        apk add curl jq
        function api() {
            x="$1"
            shift
            curl -sA"@project_name@/$BUILD_NUMBER" -GH"Authorization: Bearer $SECRET" \
                 "$SERVER_URL/~api/$x" --data-urlencode "$@@"
        }

        echo "checking for successful builds of $BUILD_VERSION..."
        for v in $(
          api builds \
            'query="Project" is "'"$PROJECT_PATH"'" and "Job" is "'"$JOB_NAME"\
        '"          and successful order by "Submit Date" desc' \
            -d offset=0 -d count=10 |
          jq -r '.[] | "\(.version)~~\(.number)"'
        ); do
            if [ "${v%~~*}" = "$BUILD_VERSION" ]; then
                echo "previous build found: $JOB_NAME #${v##*~~}" >&2
                [ "$ALLOW_RETRIES" != Yes ] && exit 1
            fi
        done

        echo 'checking build cache...'
        f="glibc-bin/glibc-bin-$BUILD_VERSION.tar.gz"
        if [ -f "$f" ]; then
            echo "cache hit: $f" >&2
            [ "$FAIL_CACHED" = Yes ] && exit 1
        fi

        if [ "$CLEAR_CACHE" = Yes ]; then
            echo 'clearing cache...'
            rm -f glibc-bin/glibc-bin-*.tar.gz
        fi

        if [ -f "$f" ]; then
            echo 'build already exists, reusing it'
            # extend cache lifetime
            touch "$f"
        else
            echo 'building tarball...'
            apk add docker
            docker run --rm --env STDOUT=1 \
              sgerrand/glibc-builder $1 /usr/glibc-compat > "$f"
        fi

        echo "checking if we can commit checksum for $commit..."
        # test if commit (onedev checks out commits not refs) is the tip of a branch
        apk add git
        cd alpine-pkg-glibc
        commit="$(git rev-parse HEAD)"
        branch="$(
          git for-each-ref --format='%(objectname) %(refname:short)' refs/heads |
          awk -v c="$commit" '$1 == c {print $2; exit}'
        )"
        if [ -z "$branch" ]; then
            echo "no branch has commit as tip" >&2
            exit
        fi

        echo -e "commit is tip of branch $branch.\ncalculating checksum..."
        apk add abuild
        adduser -SDGabuild -s/bin/sh abuild
        chown abuild:abuild . APKBUILD
        ln -s "../$f" .
        su -c 'abuild checksum' abuild
        chown $(id -u):$(id -g) . APKBUILD

        echo "creating and pushing commit..."
        git add APKBUILD
        if git diff --staged --quiet; then
            echo 'checksum is unchanged, not committing'
            exit
        fi
        git config user.name sev
        git config user.email git@@sev.monster
        git commit -m "[no ci] ci: update checksum for $BUILD_VERSION"
        git push origin "HEAD:refs/heads/$branch"
        git push -f \
          "https://$GITHUB_USER:$GITHUB_PAT@@github.com/$GITHUB_REPO" \
          "HEAD:refs/heads/$branch" || true

        echo "creating and pushing tag..."
        git tag -a "$BUILD_VERSION" -m "ci #$BUILD_NUMBER: release $BUILD_VERSION"
        git push -f origin "refs/tags/$BUILD_VERSION"
        # tag will be pushed to gh with trigger, we can skip
    envVars:
    - name: BUILD_NUMBER
      value: '@build_number@'
    - name: SECRET
      value: '@secret:sev-access-token@'
    - name: SERVER_URL
      value: '@server_url@'
    - name: PROJECT_PATH
      value: '@project_path@'
    - name: JOB_NAME
      value: '@job_name@'
    - name: ALLOW_RETRIES
      value: '@param:Allow Retries@'
    - name: FAIL_CACHED
      value: '@param:Fail If Cached@'
    - name: CLEAR_CACHE
      value: '@param:Clear Cache@'
    - name: GITHUB_USER
      value: '@property:github-user@'
    - name: GITHUB_PAT
      value: '@secret:github-pat@'
    - name: GITHUB_REPO
      value: '@property:github-repo@'
    useTTY: false
    condition: SUCCESSFUL
    optional: false
  - type: PublishArtifactStep
    name: publish-artifacts
    sourcePath: glibc-bin
    artifacts: glibc-bin-*-r*.tar.gz
    condition: SUCCESSFUL
    optional: false
  paramSpecs:
  - type: BooleanParam
    name: Allow Retries
    description: If disabled, the build will fail if there are any previous successful builds matching the version extracted from <code>APKBUILD</code> for this commit. Artifacts are not checked.
    defaultValueProvider:
      type: TrueDefaultValue
  - type: BooleanParam
    name: Fail If Cached
    description: Built <code>glibc-bin-*.tar.gz</code> tarballs are cached after build. Enabling this parameter will fail the build if there is a cached tarball from a previous build.
    defaultValueProvider:
      type: FalseDefaultValue
  - type: BooleanParam
    name: Clear Cache
    description: If a build already exists in the cache, and the build is not configured to fail in such a case, it will not be rebuilt, and will be used to tag a release. Enabling this will clear the cache and build a fresh tarball.
    defaultValueProvider:
      type: FalseDefaultValue
  triggers:
  - type: BranchUpdateTrigger
    branches: master
    paths: APKBUILD
    projects: sev/alpine-pkg-glibc
    paramMatrix:
    - name: Allow Retries
      secret: false
      valuesProvider:
        type: SpecifiedValues
        values:
        - - 'No'
    - name: Fail If Cached
      secret: false
      valuesProvider:
        type: SpecifiedValues
        values:
        - - 'Yes'
    - name: Clear Cache
      secret: false
      valuesProvider:
        type: SpecifiedValues
        values:
        - - 'No'
  maxRetries: 3
  retryDelay: 30
  timeout: 14400
- name: github-push
  jobExecutor: barbatos-docker
  steps:
  - type: PushRepository
    name: push
    remoteUrl: https://github.com/@property:github-repo@
    passwordSecret: github-pat
    force: true
    condition: SUCCESSFUL
    optional: false
  triggers:
  - type: BranchUpdateTrigger
    projects: sev/alpine-pkg-glibc
  - type: TagCreateTrigger
    projects: sev/alpine-pkg-glibc
  maxRetries: 3
  retryDelay: 30
  timeout: 14400
- name: github-pull
  jobExecutor: barbatos-docker
  steps:
  - type: PullRepository
    name: pull
    remoteUrl: https://github.com/@property:github-repo@
    passwordSecret: github-pat
    refs: refs/heads/* refs/tags/*
    withLfs: false
    force: true
    condition: SUCCESSFUL
    optional: false
  maxRetries: 3
  retryDelay: 30
  timeout: 14400
